mywaiting = seq(min(faithful$waiting), max(faithful$waiting), length.out=100)
myEruptions = predict(smoothfit, mywaiting)
plot = plot %>%
add_lines(x = ~mywaiting,
y = ~myEruptions,
type = 'scatter',
mode = 'lines',
lines = list(
color = "orange"
),
name = "Smooth Fit"
)
}
return(plot)
})
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "mybinwidth",
label = "Choose Binwidth",
min = 1,
max = 100,
value = 10
),
selectInput(
inputId = "myfillcolor",
label = "Please select a fill color:",
choices = list("Red Color"="red", "Blue Color"="blue")
),
checkboxInput(
inputId = "percent",
label = "Show Percent"
),
checkboxInput(
inputId = "linear",
label = "Linear Fit"
)
),
mainPanel(
plotlyOutput("myplot")
)
)
)
library(shiny)
library(ggplot2)
library(plotly)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "mybinwidth",
label = "Choose Binwidth",
min = 1,
max = 100,
value = 10
),
selectInput(
inputId = "myfillcolor",
label = "Please select a fill color:",
choices = list("Red Color"="red", "Blue Color"="blue")
),
checkboxInput(
inputId = "percent",
label = "Show Percent"
),
checkboxInput(
inputId = "linear",
label = "Linear Fit"
)
),
mainPanel(
plotlyOutput("myplot")
)
)
)
server <- function(input, output) {
output$myplot <- renderPlotly({
plot <- plot_ly(data = faithful,
x = ~waiting,
y = ~eruptions,
type = "scatter",
name = "Observations"
)
if(input$smooth){
smoothfit = loess(faithful$eruptions~ faithful$waiting)
mywaiting = seq(min(faithful$waiting), max(faithful$waiting), length.out=100)
myEruptions = predict(smoothfit, mywaiting)
plot = plot %>%
add_lines(x = ~mywaiting,
y = ~myEruptions,
type = 'scatter',
mode = 'lines',
lines = list(
color = "orange"
),
name = "Smooth Fit"
)
}
return(plot)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(plotly)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "mybinwidth",
label = "Choose Binwidth",
min = 1,
max = 100,
value = 10
),
selectInput(
inputId = "myfillcolor",
label = "Please select a fill color:",
choices = list("Red Color"="red", "Blue Color"="blue")
),
checkboxInput(
inputId = "percent",
label = "Show Percent"
),
checkboxInput(
inputId = "linear",
label = "Linear Fit"
)
),
mainPanel(
plotlyOutput("myplot")
)
)
)
server <- function(input, output) {
output$myplot <- renderPlotly({
plot <- plot_ly(data = faithful,
x = ~waiting,
y = ~eruptions,
type = "scatter",
name = "Observations"
)
# if(input$smooth){
#   smoothfit = loess(faithful$eruptions~ faithful$waiting)
#   mywaiting = seq(min(faithful$waiting), max(faithful$waiting), length.out=100)
#   myEruptions = predict(smoothfit, mywaiting)
#
#
#   plot = plot %>%
#     add_lines(x = ~mywaiting,
#               y = ~myEruptions,
#               type = 'scatter',
#               mode = 'lines',
#               lines = list(
#                 color = "orange"
#               ),
#               name = "Smooth Fit"
#        )
# }
return(plot)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(plotly)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "mybinwidth",
label = "Choose Binwidth",
min = 1,
max = 100,
value = 10
),
selectInput(
inputId = "myfillcolor",
label = "Please select a fill color:",
choices = list("Red Color"="red", "Blue Color"="blue")
),
checkboxInput(
inputId = "percent",
label = "Show Percent"
),
checkboxInput(
inputId = "smooth",
label = "Smooth Fit"
)
),
mainPanel(
plotlyOutput("myplot")
)
)
)
server <- function(input, output) {
output$myplot <- renderPlotly({
plot <- plot_ly(data = faithful,
x = ~waiting,
y = ~eruptions,
type = "scatter",
name = "Observations"
)
if(input$smooth){
smoothfit = loess(faithful$eruptions~ faithful$waiting)
mywaiting = seq(min(faithful$waiting), max(faithful$waiting), length.out=100)
myEruptions = predict(smoothfit, mywaiting)
plot = plot %>%
add_lines(x = ~mywaiting,
y = ~myEruptions,
type = 'scatter',
mode = 'lines',
lines = list(
color = "orange"
),
name = "Smooth Fit"
)
}
return(plot)
})
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(ggplot2)
library(plotly)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
radioButton(
inputId="whichPlot",
label="Which plot do you want to construct?",
choices = list("Histogram" = "hist", "Scatterplot" = "scat"),
inline = TRUE
),
sliderInput(
inputId = "slider",
label = "Select the binwidth",
min = 0,
max = 100
),
numericInput(
inputId = "myBreaks",
label = "Select the number",
value = 0.5,
step = 0.1
)
),
mainPanel(
plotlyOutput("myplot")
)
)
)
library(shiny)
library(ggplot2)
library(plotly)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
radioButtons(
inputId="whichPlot",
label="Which plot do you want to construct?",
choices = list("Histogram" = "hist", "Scatterplot" = "scat"),
inline = TRUE
),
sliderInput(
inputId = "slider",
label = "Select the binwidth",
min = 0,
max = 100
),
numericInput(
inputId = "myBreaks",
label = "Select the number",
value = 0.5,
step = 0.1
)
),
mainPanel(
plotlyOutput("myplot")
)
)
)
library(shiny)
library(ggplot2)
library(plotly)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
radioButtons(
inputId="whichPlot",
label="Which plot do you want to construct?",
choices = list("Histogram" = "hist", "Scatterplot" = "scat"),
inline = TRUE
),
sliderInput(
inputId = "slider",
label = "Select the binwidth",
min = 0,
max = 100,
value = 2
),
numericInput(
inputId = "myBreaks",
label = "Select the number",
value = 0.5,
step = 0.1
)
),
mainPanel(
plotlyOutput("myplot")
)
)
)
server <- function(input, output) {
output$myplot <- renderPlotly(
if(input$whichplot="hist"){
library(shiny)
library(ggplot2)
library(plotly)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
radioButtons(
inputId="whichPlot",
label="Which plot do you want to construct?",
choices = list("Histogram" = "hist", "Scatterplot" = "scat"),
inline = TRUE
),
sliderInput(
inputId = "slider",
label = "Select the binwidth",
min = 0,
max = 100,
value = 2
),
numericInput(
inputId = "myBreaks",
label = "Select the number",
value = 0.5,
step = 0.1
)
),
mainPanel(
plotlyOutput("myplot")
)
)
)
server <- function(input, output) {
output$myplot <- renderPlotly(
if(input$whichplot=="hist"){
plot_ly(faithful, type="histogram",
x=~eruptions, xbins = list(size=req(input$myBreaks)))
)
library(shiny)
library(ggplot2)
library(plotly)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
radioButtons(
inputId="whichPlot",
label="Which plot do you want to construct?",
choices = list("Histogram" = "hist", "Scatterplot" = "scat"),
inline = TRUE
),
sliderInput(
inputId = "slider",
label = "Select the binwidth",
min = 0,
max = 100,
value = 2
),
numericInput(
inputId = "myBreaks",
label = "Select the number",
value = 0.5,
step = 0.1
)
),
mainPanel(
plotlyOutput("myplot")
)
)
)
server <- function(input, output) {
output$myplot <- renderPlotly(
if(input$whichplot=="hist"){
plot_ly(faithful,
type= "histogram",
x= ~eruptions,
xbins = list(size=req(input$myBreaks))
)
}
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(plotly)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
radioButtons(
inputId="whichPlot",
label="Which plot do you want to construct?",
choices = list("Histogram" = "hist", "Scatterplot" = "scat"),
inline = TRUE
),
sliderInput(
inputId = "slider",
label = "Select the binwidth",
min = 0,
max = 100,
value = 2
),
numericInput(
inputId = "myBreaks",
label = "Select the number",
value = 0.5,
step = 0.1
)
),
mainPanel(
plotlyOutput("myplot")
)
)
)
server <- function(input, output) {
output$myplot <- renderPlotly(
if(input$whichPlot=="hist"){
plot_ly(faithful,
type= "histogram",
x= ~eruptions,
xbins = list(size=req(input$myBreaks))
)
}
)
}
shinyApp(ui = ui, server = server)
shiny::runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
rsconnect::deployApp
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
install.packages('rsconnect')
install.packages("rsconnect")
shiny::runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
library(rsconnect)
rsconnect::setAccountInfo(name='giveme10', token='B5BD7B9CC7F0A32CB66D206E54E868D5', secret='IpgHYy7suCuTAHhhEhcKB6yQnB3vJF0uP9XJiGLv')
rsconnect::deployApp("/Users/fehmineffati/Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter")
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
rsconnect::setAccountInfo(name='giveme10', token='B5BD7B9CC7F0A32CB66D206E54E868D5', secret='IpgHYy7suCuTAHhhEhcKB6yQnB3vJF0uP9XJiGLv')
rsconnect::deployApp("/Users/fehmineffati/Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter")
shiny::runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
packages.install("leaflet")
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
shiny::runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
library(leaflet)
install.packages("leaflet")
library(leaflet)
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
install.packages("geojsonio")
library(geojsonio)
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
install.packages("leaflet.extras")
library(leaflet.extras)
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
install.packages("leaflet.extras", dependencies = TRUE)
library(leaflet.extras)
install.packages("leaflet.extras", dependencies = TRUE)
install.packages("leaflet.extras", dependencies = TRUE)
shiny::runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
library(rsconnect)
rsconnect::setAccountInfo(name='giveme10', token='B5BD7B9CC7F0A32CB66D206E54E868D5', secret='IpgHYy7suCuTAHhhEhcKB6yQnB3vJF0uP9XJiGLv')
rsconnect::deployApp("/Users/fehmineffati/Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter")
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
rsconnect::deployApp("/Users/fehmineffati/Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter")
shiny::runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
rsconnect::deployApp("/Users/fehmineffati/Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter")
shiny::runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
install.packages("vaderSentiment")
tweets <- read.csv("tweets.csv", stringsAsFactors = FALSE)
ls
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
install.packages("vaderSentiment")
updateR()
runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
library(vaderSentiment)
install.packages("vaderSentiment")
library(vaderSentiment)
install.packages("installr")
installr::updateR()
install.packages("vaderSentiment")
shiny::runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
shiny::runApp('Documents/Classes/Spring 2023/Environmental Twitter/R/EnvTwitter')
shiny::runApp('Documents/Classes/Spring 2023/Environmental Twitter/EnvironmentalTwitter/Analysis/R/EnvTwitter')
runApp('Documents/Classes/Spring 2023/Environmental Twitter/TBENV/R/EnvTwitter')
